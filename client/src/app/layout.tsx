'use client'

import '../styles/globals.scss'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { useEffect, useState, useCallback, Suspense, lazy } from 'react'
import { Container } from 'react-bootstrap'
import { useViewport } from '../hooks'
import { changeBodyAttribute } from '../utils'
import * as layoutConstants from '../appConstants'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app'
}

const LeftSidebar = lazy(() => import('../layouts/LeftSidebar'))

const loading = () => <div className=""></div>

export default function RootLayout({ children }: any) {
  const { width } = useViewport()
  const [leftSideBarType, setLeftSideBarType] = useState('condense')
  const [leftSideBarTheme, setLefSideBarTheme] = useState('dark')

  useEffect(() => {
    changeBodyAttribute('data-leftbar-theme', leftSideBarTheme)
  }, [leftSideBarTheme])

  useEffect(() => {
    changeBodyAttribute('data-leftbar-compact-mode', leftSideBarType)
  }, [leftSideBarType])

  const updateDimensions = useCallback(() => {
    if (width > 768 && width <= 1028) {
      setLeftSideBarType(
        layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED
      )
    } else if (width > 1028) {
      setLeftSideBarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED)
    }
  }, [width])

  useEffect(() => {
    window.addEventListener('resize', updateDimensions)

    return () => {
      window.removeEventListener('resize', updateDimensions)
    }
  }, [updateDimensions])

  const isCondensed =
    leftSideBarType === layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED
  // const isLight = leftSideBarTheme === layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT;
  return (
    <html lang="en">
      <body data-leftbar-theme="dark" className={inter.className}>
        <div className="wrapper">
          <Suspense fallback={loading()}>
            <LeftSidebar
              isCondensed={isCondensed}
              isLight={true}
              hideUserProfile={true}
            />
          </Suspense>
          <div className="content-page">
            <div className="content">
              {/* <Suspense fallback={loading()}>
                            <Topbar openLeftMenuCallBack={openMenu} hideLogo={true} />
                        </Suspense> */}
              <Container fluid>{children}</Container>
            </div>

            {/* <Suspense fallback={loading()}>
                        <Footer />
                    </Suspense> */}
          </div>
        </div>
      </body>
    </html>
  )
}
