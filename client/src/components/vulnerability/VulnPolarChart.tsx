'use client'

import { useEffect, useState } from 'react'
import { Card } from 'react-bootstrap'
import { WebScanService } from '@/service/api'
import {
  Chart as ChartJS,
  RadialLinearScale,
  ArcElement,
  Tooltip,
  Legend,
  ChartOptions
} from 'chart.js'
import { PolarArea } from 'react-chartjs-2'
import { Spinner } from '@/components'
import { convertChartData } from '@/helpers'

ChartJS.register(RadialLinearScale, ArcElement, Tooltip, Legend)

interface IVulnPolarChart {
  webScanId: string | null
}

const polarChartOpts: ChartOptions<'polarArea'> = {
  maintainAspectRatio: false,
  plugins: {
    legend: {
      display: true
    }
  }
}

export default function VulnPolarChart({ webScanId }: IVulnPolarChart) {
  const [webScanResults, setWebScanResults] = useState<any>(null)
  const [isLoading, setIsLoading] = useState<boolean>(true)

  useEffect(() => {
    if (webScanId) {
      const fetchWebScanDataByScanId = async () => {
        const fetchedData = await new WebScanService().getWebScanById(webScanId)
        setWebScanResults(fetchedData[0])
        setIsLoading(false)
      }
      fetchWebScanDataByScanId()
    }
  }, [webScanId])

  return (
    <Card>
      <Card.Body>
        <h4 className="header-title mb-3">ENDPOINT SCALE STATUS</h4>
        <div style={{ height: '400px' }}>
          {isLoading && <Spinner />}
          {!isLoading && (
            <div
              className="chartjs-chart"
              style={{ height: '400px', maxWidth: '100%' }}>
              <PolarArea
                data={convertChartData(webScanResults)}
                options={polarChartOpts}
              />
            </div>
          )}
        </div>
      </Card.Body>
    </Card>
  )
}
