'use client'

import { useState, useEffect } from 'react'
import { Card, Table } from 'react-bootstrap'
import { convertSeverity } from '@/helpers'
import { ZAPScanService } from '@/service/api'
import { Spinner } from '@/components'

interface IVulnDataTable {
  scanUrl: string | null
  onSelectZapScan: (title: string) => void
}

export default function VulnDatatable({
  scanUrl,
  onSelectZapScan
}: IVulnDataTable) {
  const [zapScans, setZapScans] = useState([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    if (scanUrl) {
      const fetchZapScansByUrl = async () => {
        const fetchedData = await new ZAPScanService().getZapScanByUrl(scanUrl)
        setZapScans(
          fetchedData.sort((a: any, b: any) => b.vulnScore - a.vulnScore)
        )
        setIsLoading(false)
      }
      fetchZapScansByUrl()
    }
  }, [scanUrl])

  return (
    <Card>
      <Card.Body>
        <h4 className="header-title mb-3">Vulnerabilities Table</h4>
        <div className="table-custom-layout" style={{ height: '400px' }}>
          {isLoading && <Spinner />}
          {!isLoading && (
            <Table
              className="table-centered mb-0"
              style={{
                height: '400px',
                display: 'block',
                overflowY: `${zapScans.length > 7 ? 'scroll' : 'auto'}`
              }}>
              <thead className="table-dark">
                <tr>
                  <th>Ref.</th>
                  <th>Vulnerability</th>
                  <th>Severity</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {zapScans &&
                  zapScans.map((item: any, index: number) => {
                    return (
                      <tr
                        key={`idx-${index}`}
                        onClick={() => onSelectZapScan(item.vulnId)}>
                        <th scope="row">{index + 1}</th>
                        <td>{item && item.title}</td>
                        <td
                          className={convertSeverity(
                            item.vulnScore
                          ).toLowerCase()}
                          style={{
                            fontWeight: 'bold'
                          }}>
                          {item && convertSeverity(item.vulnScore)}
                        </td>
                        <td>{''}</td>
                      </tr>
                    )
                  })}
              </tbody>
            </Table>
          )}
        </div>
      </Card.Body>
    </Card>
  )
}
