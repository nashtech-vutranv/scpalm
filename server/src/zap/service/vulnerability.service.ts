import { prisma } from "../../utils/dbconnect";
import { WebScan, ZAPScan } from "../../utils/zap/types";

/**
 * Function to query all records in the ZAP scanner table
 * @returns An object array containing all vulnerabilities present in the table
 */
async function getAllZapScans(): Promise<ZAPScan[]> {
    return prisma.zAPScanResult.findMany({
        select: {
            vulnId: true,
            scanUrl: true,
            scanId: true,
            title: true,
            vulnScore: true,
            description: true,
            solution: true,
            reference: true
        }
    })
}

/**
 * Function to query all vulnerabilities with the given scanId
 * @param scanId - Accepts a string of scanId 
 * @returns an array object of type ZAPScans, which contains the list of all vulnerabilities, sorted by their scanId or a null object
 */
async function getAllZapScansByScanId(scanId: string): Promise<ZAPScan[] | null> {
    return prisma.zAPScanResult.findMany({
        where: {
            scanId: {
                contains: scanId
            }
        },
        select: {
            vulnId: true,
            scanId: true,
            scanUrl: true,
            title: true,
            vulnScore: true,
            description: true,
            solution: true,
            reference: true
        }
    })
}

/**
 * Function to query a specific vulnerability details, sorted by vulnId
 * @param vulnId - Accepts a string of vulnId to query
 * @returns an object of type ZAPScans which contains the details of the vulnerability, or a null object if there are no matching vulnerabilities
 */
async function getZapScanByVulnId(vulnId: string): Promise<ZAPScan | null> {
    return prisma.zAPScanResult.findFirst({
        where: {
            vulnId: {
                contains: vulnId
            }
        },
        select: {
            vulnId: true,
            scanId: true,
            scanUrl: true,
            title: true,
            vulnScore: true,
            description: true,
            solution: true,
            reference: true
        }
    })
}

/**
 * Function to query vulnerabilities, sorted by scanUrl
 * @param scanUrl - Accepts a string of scanUrl to query
 * @returns an array object of type ZAPScans, which contains all vulnerabilities, sorted by scanUrl or a null object
 */
async function getZapScansByUrl(scanUrl: string): Promise<ZAPScan[] | null> {
    return prisma.zAPScanResult.findMany({
        where: {
            scanUrl: {
                contains: scanUrl
            }
        },
        select: {
            vulnId: true,
            scanId: true,
            scanUrl: true,
            title: true,
            vulnScore: true,
            description: true,
            solution: true,
            reference: true
        }
    })
}

/**
 * Function to query for all records in WebScans
 * @returns an array object containing all WebScans
 */
async function getAllWebScans(): Promise<WebScan[]> {
    return prisma.webScanResults.findMany({
        select: {
            scanId: true,
            scanUrl: true,
            scanDate: true,
            projectId: true,
            vulnTotal: true,
            vulnCritical: true,
            vulnHigh: true,
            vulnMedium: true,
            vulnLow: true,
            vulnInfo: true,
            createdTime: true,
            isActive: true,
            organizationOrgId: true
        }
    })
}

/**
 * Function to query the WebScans table based on the projectId
 * @param projectId - Accepts a string of projectId to be used for querying operation
 * @returns an array object containing all information about a specific webscan, sorted by projectId or a null object
 */
async function getWebScansByProjectId(projectId: string): Promise<WebScan[] | null> {
    return prisma.webScanResults.findMany({
        where: { projectId },
        select: {
            scanId: true,
            scanUrl: true,
            scanDate: true,
            projectId: true,
            vulnTotal: true,
            vulnCritical: true,
            vulnHigh: true,
            vulnMedium: true,
            vulnLow: true,
            vulnInfo: true,
            createdTime: true,
            isActive: true,
            organizationOrgId: true
        }
    })
}

/**
 * Function to query the WebsCans table based on the scanId
 * @param scanId - Accepts a string of scanId to be used in querying operation
 * @returns an object containing the details of the specified WebScan
 */
async function getWebScanById(scanId: string): Promise<WebScan[] | null> {
    return prisma.webScanResults.findMany({
        where: {
            scanId: {
                contains: scanId
            }
        },
        select: {
            scanId: true,
            scanUrl: true,
            scanDate: true,
            projectId: true,
            vulnTotal: true,
            vulnCritical: true,
            vulnHigh: true,
            vulnMedium: true,
            vulnLow: true,
            vulnInfo: true,
            createdTime: true,
            isActive: true,
            organizationOrgId: true
        }
    })
}

export { getAllZapScans, getAllZapScansByScanId, getZapScanByVulnId, getZapScansByUrl, getAllWebScans, getWebScanById, getWebScansByProjectId }