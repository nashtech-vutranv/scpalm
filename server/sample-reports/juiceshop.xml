<?xml version="1.0"?>
<OWASPZAPReport programName="OWASP ZAP" version="D-2023-06-28" generated="Thu, 20 Jul 2023 09:04:09">
	
		<site name="http://juice-shop.herokuapp.com" host="juice-shop.herokuapp.com" port="80" ssl="false">
			<alerts>
				
			</alerts>
		</site>
	
	
		<site name="https://juice-shop.herokuapp.com" host="juice-shop.herokuapp.com" port="443" ssl="true">
			<alerts>
				
					<alertitem>
						<pluginid>40040</pluginid>
						<alertRef>40040</alertRef>
						<alert>CORS Misconfiguration</alert>
						<name>CORS Misconfiguration</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim&apos;s user agent.&lt;/p&gt;&lt;p&gt;In order to perform authenticated AJAX queries, the server must specify the header &quot;Access-Control-Allow-Credentials: true&quot; and the &quot;Access-Control-Allow-Origin&quot; header must be set to null or the malicious page&apos;s domain. Even if this misconfiguration doesn&apos;t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).&lt;/p&gt;&lt;p&gt;A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public/favicon_js.ico</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/polyfills.js</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/robots.txt</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/runtime.js</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/styles.css</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack>origin: https://vWBAQEdp.com</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>12</count>
						<solution>&lt;p&gt;If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&lt;/p&gt;&lt;p&gt;https://portswigger.net/web-security/cors&lt;/p&gt;</reference>
						<cweid>942</cweid>
						<wascid>14</wascid>
						<sourceid>1002</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10038</pluginid>
						<alertRef>10038-1</alertRef>
						<alert>Content Security Policy (CSP) Header Not Set</alert>
						<name>Content Security Policy (CSP) Header Not Set</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page &#x2014; covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&lt;/p&gt;&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;http://www.w3.org/TR/CSP/&lt;/p&gt;&lt;p&gt;http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html&lt;/p&gt;&lt;p&gt;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&lt;/p&gt;&lt;p&gt;http://caniuse.com/#feat=contentsecuritypolicy&lt;/p&gt;&lt;p&gt;http://content-security-policy.com/&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10098</pluginid>
						<alertRef>10098</alertRef>
						<alert>Cross-Domain Misconfiguration</alert>
						<name>Cross-Domain Misconfiguration</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public/favicon_js.ico</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/polyfills.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/robots.txt</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/runtime.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/styles.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
									<otherinfo>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</otherinfo>
								</instance>
							
						</instances>
						<count>9</count>
						<solution>&lt;p&gt;Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).&lt;/p&gt;&lt;p&gt;Configure the &quot;Access-Control-Allow-Origin&quot; HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy&lt;/p&gt;</reference>
						<cweid>264</cweid>
						<wascid>14</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>40039</pluginid>
						<alertRef>40039</alertRef>
						<alert>Web Cache Deception</alert>
						<name>Web Cache Deception</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Web cache deception may be possible. It may be possible for unauthorised user to view sensitive data on this page.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param></param>
									<attack>/test.css,/test.jpg,/test.js,/test.html,/test.gif,/test.png,/test.svg,/test.php,/test.txt,/test.pdf,/test.asp,</attack>
									<evidence></evidence>
									<otherinfo>Cached Authorised Response and Unauthorised Response are similar.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param></param>
									<attack>/test.css,/test.jpg,/test.js,/test.html,/test.gif,/test.png,/test.svg,/test.php,/test.txt,/test.pdf,/test.asp,</attack>
									<evidence></evidence>
									<otherinfo>Cached Authorised Response and Unauthorised Response are similar.</otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;It is strongly advised to refrain from classifying file types, such as images or stylesheets solely by their URL and file extension. Instead you should make sure that files are cached based on their Content-Type header.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;Cached Authorised Response and Unauthorised Response are similar.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html&lt;/p&gt;&lt;p&gt;https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/&lt;/p&gt;</reference>
						<cweid>0</cweid>
						<wascid>0</wascid>
						<sourceid>1132</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10017</pluginid>
						<alertRef>10017</alertRef>
						<alert>Cross-Domain JavaScript Source File Inclusion</alert>
						<name>Cross-Domain JavaScript Source File Inclusion</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The page includes one or more script files from a third-party domain.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt;</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt;</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;Ensure JavaScript source files are loaded from only trusted sources, and the sources can&apos;t be controlled by end users of the application.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference></reference>
						<cweid>829</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10110</pluginid>
						<alertRef>10110</alertRef>
						<alert>Dangerous JS Functions</alert>
						<name>Dangerous JS Functions</name>
						<riskcode>1</riskcode>
						<confidence>1</confidence>
						<riskdesc>Low (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;A dangerous JS function seems to be in use that would leave the site vulnerable.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>bypassSecurityTrustHtml</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>bypassSecurityTrustHtml</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;See the references for security advice on the use of these functions.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://angular.io/guide/security&lt;/p&gt;</reference>
						<cweid>749</cweid>
						<wascid>-1</wascid>
						<sourceid>22</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10063</pluginid>
						<alertRef>10063-2</alertRef>
						<alert>Deprecated Feature Policy Header Set</alert>
						<name>Deprecated Feature Policy Header Set</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The header has now been renamed to Permissions-Policy. &lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Feature-Policy</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Feature-Policy</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/polyfills.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Feature-Policy</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/runtime.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Feature-Policy</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Feature-Policy</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Feature-Policy</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>6</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy&lt;/p&gt;&lt;p&gt;https://scotthelme.co.uk/goodbye-feature-policy-and-hello-permissions-policy/&lt;/p&gt;</reference>
						<cweid>16</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10047</pluginid>
						<alertRef>10047</alertRef>
						<alert>HTTPS Content Available via HTTP</alert>
						<name>HTTPS Content Available via HTTP</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption). &lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public/favicon_js.ico</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>http://juice-shop.herokuapp.com/assets/public/favicon_js.ico</evidence>
									<otherinfo>ZAP attempted to connect via: http://juice-shop.herokuapp.com/assets/public/favicon_js.ico</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>http://juice-shop.herokuapp.com/main.js</evidence>
									<otherinfo>ZAP attempted to connect via: http://juice-shop.herokuapp.com/main.js</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/polyfills.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>http://juice-shop.herokuapp.com/polyfills.js</evidence>
									<otherinfo>ZAP attempted to connect via: http://juice-shop.herokuapp.com/polyfills.js</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/robots.txt</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>http://juice-shop.herokuapp.com/robots.txt</evidence>
									<otherinfo>ZAP attempted to connect via: http://juice-shop.herokuapp.com/robots.txt</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/runtime.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>http://juice-shop.herokuapp.com/runtime.js</evidence>
									<otherinfo>ZAP attempted to connect via: http://juice-shop.herokuapp.com/runtime.js</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/styles.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>http://juice-shop.herokuapp.com/styles.css</evidence>
									<otherinfo>ZAP attempted to connect via: http://juice-shop.herokuapp.com/styles.css</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>http://juice-shop.herokuapp.com/vendor.js</evidence>
									<otherinfo>ZAP attempted to connect via: http://juice-shop.herokuapp.com/vendor.js</otherinfo>
								</instance>
							
						</instances>
						<count>7</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;ZAP attempted to connect via: http://juice-shop.herokuapp.com/assets/public/favicon_js.ico&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;&lt;p&gt;http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&lt;/p&gt;&lt;p&gt;http://caniuse.com/stricttransportsecurity&lt;/p&gt;&lt;p&gt;http://tools.ietf.org/html/rfc6797&lt;/p&gt;</reference>
						<cweid>311</cweid>
						<wascid>4</wascid>
						<sourceid>1057</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10035</pluginid>
						<alertRef>10035</alertRef>
						<alert>Strict-Transport-Security Header Not Set</alert>
						<name>Strict-Transport-Security Header Not Set</name>
						<riskcode>1</riskcode>
						<confidence>3</confidence>
						<riskdesc>Low (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public/favicon_js.ico</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/polyfills.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/robots.txt</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/runtime.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/styles.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>9</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;&lt;p&gt;http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&lt;/p&gt;&lt;p&gt;http://caniuse.com/stricttransportsecurity&lt;/p&gt;&lt;p&gt;http://tools.ietf.org/html/rfc6797&lt;/p&gt;</reference>
						<cweid>319</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10096</pluginid>
						<alertRef>10096</alertRef>
						<alert>Timestamp Disclosure - Unix</alert>
						<name>Timestamp Disclosure - Unix</name>
						<riskcode>1</riskcode>
						<confidence>1</confidence>
						<riskdesc>Low (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;A timestamp was disclosed by the application/web server - Unix&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>1734944650</evidence>
									<otherinfo>1734944650, which evaluates to: 2024-12-23 09:04:10</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;1734944650, which evaluates to: 2024-12-23 09:04:10&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;http://projects.webappsec.org/w/page/13246936/Information%20Leakage&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>22</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10094</pluginid>
						<alertRef>10094-3</alertRef>
						<alert>Base64 Disclosure</alert>
						<name>Base64 Disclosure</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Base64 encoded data was disclosed by the application/web server. Note: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>com/forms/d/e/1FAIpQLSdaNEuz0dzFA2sexCa0AJ4QOb2OYdEL04eQOLFD2Y4T-BW6ag/viewform</evidence>
									<otherinfo>r&#xfffd;&#xfffd;~&#xfffd;&#xfffd;&#xfffd;&#x7f;{&#xfffd;E&#xfffd;P-&apos;Z4K&#xfffd;&#xfffd;&#xfffd;&#xfffd;k&#xfffd;&amp;&#xfffd;&#xfffd;9&#xfffd;&#xfffd;a&#xfffd;&#x4c7;&#xfffd;8&#xfffd;C&#x64e;&#xfffd;&#xfffd;j&#xfffd;&#xfffd;&#xfffd;&#xfffd;</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</evidence>
									<otherinfo>&#xfffd;]&#xfffd;&#x37bb;&#xfffd;&#x59b;q&#x5df;&#xfffd;&#xfffd;&#xfffd;Y&#xfffd;&#xfffd;&#xfffd;&#xfffd;&#xfffd;&#x6ef;&#xfffd;&#xfffd;&#xfffd;Q&#xfffd; &#xfffd;&#xfffd;0&#x4cf;A&#xfffd;QU&#xfffd;a</otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;r&#xfffd;&#xfffd;~&#xfffd;&#xfffd;&#xfffd;&#x7f;{&#xfffd;E\x0000&#xfffd;P-&apos;Z4K&#xfffd;&#xfffd;&#xfffd;&#xfffd;\x0003k\x001e&#xfffd;&amp;&#xfffd;\x0000&#xfffd;\x00109&#xfffd;&#xfffd;a&#xfffd;\x000b&#x4c7;&#xfffd;8&#xfffd;C&#x64e;\x0013&#xfffd;\x0015&#xfffd;j\x000f&#xfffd;&#xfffd;\x001f&#xfffd;&#xfffd;&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;http://projects.webappsec.org/w/page/13246936/Information%20Leakage&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>22</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10027</pluginid>
						<alertRef>10027</alertRef>
						<alert>Information Disclosure - Suspicious Comments</alert>
						<name>Information Disclosure - Suspicious Comments</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>query</evidence>
									<otherinfo>The following pattern was used: \bQUERY\b and was detected in the element starting with: &quot;&quot;use strict&quot;;(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[179],{902:(at,Bt,d)=&gt;{var J=d(1481),t=d(4650),k=d(&quot;, see evidence field for the suspicious comment/snippet.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>query</evidence>
									<otherinfo>The following pattern was used: \bQUERY\b and was detected in the element starting with: &quot;(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[736],{9187:(Dt,re,d)=&gt;{&quot;use strict&quot;;d.d(re,{Xy:()=&gt;X,ne:()=&gt;He,&quot;, see evidence field for the suspicious comment/snippet.</otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;The following pattern was used: \bQUERY\b and was detected in the element starting with: &quot;&quot;use strict&quot;;(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[179],{902:(at,Bt,d)=&gt;{var J=d(1481),t=d(4650),k=d(&quot;, see evidence field for the suspicious comment/snippet.&lt;/p&gt;</otherinfo>
						<reference></reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>22</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10109</pluginid>
						<alertRef>10109</alertRef>
						<alert>Modern Web Application</alert>
						<name>Modern Web Application</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
									<otherinfo>No links have been found while there are scripts, which is an indication that this is a modern web application.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
									<otherinfo>No links have been found while there are scripts, which is an indication that this is a modern web application.</otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;This is an informational alert and so no changes are required.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;No links have been found while there are scripts, which is an indication that this is a modern web application.&lt;/p&gt;</otherinfo>
						<reference></reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10015</pluginid>
						<alertRef>10015</alertRef>
						<alert>Re-examine Cache-control Directives</alert>
						<name>Re-examine Cache-control Directives</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param>Cache-Control</param>
									<attack></attack>
									<evidence>public, max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/robots.txt</uri>
									<method>GET</method>
									<param>Cache-Control</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param>Cache-Control</param>
									<attack></attack>
									<evidence>public, max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;For secure content, ensure the cache-control HTTP header is set with &quot;no-cache, no-store, must-revalidate&quot;. If an asset should be cached consider setting the directives &quot;public, max-age, immutable&quot;.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching&lt;/p&gt;&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&lt;/p&gt;&lt;p&gt;https://grayduck.mn/2021/09/13/cache-control-recommendations/&lt;/p&gt;</reference>
						<cweid>525</cweid>
						<wascid>13</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10049</pluginid>
						<alertRef>10049</alertRef>
						<alert>Storable and Cacheable Content</alert>
						<name>Storable and Cacheable Content</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where &quot;shared&quot; caching servers such as &quot;proxy&quot; caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/robots.txt</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:&lt;/p&gt;&lt;p&gt;Cache-Control: no-cache, no-store, must-revalidate, private&lt;/p&gt;&lt;p&gt;Pragma: no-cache&lt;/p&gt;&lt;p&gt;Expires: 0&lt;/p&gt;&lt;p&gt;This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. &lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://tools.ietf.org/html/rfc7234&lt;/p&gt;&lt;p&gt;https://tools.ietf.org/html/rfc7231&lt;/p&gt;&lt;p&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)&lt;/p&gt;</reference>
						<cweid>524</cweid>
						<wascid>13</wascid>
						<sourceid>17</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10049</pluginid>
						<alertRef>10049</alertRef>
						<alert>Storable but Non-Cacheable Content</alert>
						<name>Storable but Non-Cacheable Content</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. &lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public/favicon_js.ico</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/polyfills.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/runtime.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/styles.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>max-age=0</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>8</count>
						<solution></solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://tools.ietf.org/html/rfc7234&lt;/p&gt;&lt;p&gt;https://tools.ietf.org/html/rfc7231&lt;/p&gt;&lt;p&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)&lt;/p&gt;</reference>
						<cweid>524</cweid>
						<wascid>13</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10104</pluginid>
						<alertRef>10104</alertRef>
						<alert>User Agent Fuzzer</alert>
						<name>User Agent Fuzzer</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>msnbot/1.1 (+http://search.msn.com/msnbot.htm)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://juice-shop.herokuapp.com/assets/public</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>msnbot/1.1 (+http://search.msn.com/msnbot.htm)</attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>24</count>
						<solution></solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://owasp.org/wstg&lt;/p&gt;</reference>
						<cweid>0</cweid>
						<wascid>0</wascid>
						<sourceid>305</sourceid>
					</alertitem>
				
			</alerts>
		</site>
	
</OWASPZAPReport>